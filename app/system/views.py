from django.contrib.auth.decorators import login_requiredfrom django.shortcuts import render, HttpResponseRedirect,render_to_responsefrom django.http import HttpResponsefrom app.system.forms  import FileForm,TermForm,CourseForm,EditTermForm,EditCourseFormfrom app.system.utils import handle_uploaded_userfrom django.core.exceptions import ObjectDoesNotExistfrom  app import modelsimport datetime# Create your views here.@login_required(login_url='app:login')def index(request):    return render(request,'system/admin_term.html')@login_required(login_url='app:login')def index_course(request):    return render(request,'system/admin_course.html')@login_required(login_url='app:login')def upload_students(request):    if request.method == 'POST':        form = FileForm(request.POST, request.FILES)        if form.is_valid():            if request.FILES['filefield'].name.split('.')[-1] == 'xlsx':                try:                    handle_uploaded_user(request,course_id=request.POST['courseId'],f=request.FILES['filefield'],user_role='student')                except ObjectDoesNotExist as e:                    error_message = '上传失败'                    return +HttpResponseRedirect('loadStudents'+'?message='+error_message)                return HttpResponseRedirect('loadStudents'+'?message=success')            else:                error_message = '文件格式错误，请上传Excel文件（.xlsl)'                form = FileForm()                return HttpResponseRedirect('loadStudents' + '?message=' + error_message)        else:            error_message = '请添加文件'            form = FileForm()            return HttpResponseRedirect('loadStudents'+'?message='+error_message)    return HttpResponseRedirect('loadStudents')@login_required(login_url='app:login')def upload_teachers(request):    if request.method == 'POST':        form = FileForm(request.POST, request.FILES)        if form.is_valid():            if request.FILES['filefield'].name.split('.')[-1] == 'xlsx':                try:                    handle_uploaded_user(request,course_id=request.POST['courseId'],f=request.FILES['filefield'],user_role='teacher')                except ObjectDoesNotExist as e:                    error_message = "上传失败"                    return HttpResponseRedirect('loadTeacher'+'?message='+error_message)                return HttpResponseRedirect('loadTeacher'+'?message=sucess')            else:                error_message = '文件格式错误，请上传Excel文件（.xlsl)'                return HttpResponseRedirect('loadTeacher' + '?message='+error_message)        else:            error_message = '请添加文件'            form = FileForm()            return HttpResponseRedirect('loadTeacher' + '?message=' + error_message)    return HttpResponseRedirect('loadTeacher')@login_required(login_url='app:login')def create_term(request):    if request.method == "POST":        form = TermForm(request.POST)        if form.is_valid():            year = form.cleaned_data['year']            semester = form.cleaned_data['semester']            term_exists = models.Term.objects.filter(year=year, semester=semester)            if (term_exists):                form = TermForm()                error_message = '学期已存在'                return  render(request,'system/admin_create_term.html',{'form':form,'errorMessage':error_message})            else:                models.Term.objects.create(year=year,semester=semester,startWeek=form.cleaned_data['startWeek'],endWeek=form.cleaned_data['endWeek'])                return   HttpResponseRedirect('term'+'?message=success')        else:            form = TermForm()            return render(request, 'system/admin_create_term.html', {'form': form})    else:        form = TermForm()        return render(request,'system/admin_create_term.html',{'form':form})@login_required(login_url='app:login')def create_course(request):    if request.method == "POST":        form = CourseForm(request.POST)        if form.is_valid():            name = form.cleaned_data['name']            term_id = request.POST['term']            course_exists = models.Course.objects.filter(name=name,term=term_id)            if (course_exists):                error_message = '课程存在'                return render(request,'system/admin_create_course.html',{'errorMessage':error_message})            else:                models.Course.objects.create(                    name=name,                    term= models.Term.objects.get(id=term_id),                    classroom=form.cleaned_data['classroom'],                    credit=form.cleaned_data['credit'],                    status='unstarted',                    startTime=form.cleaned_data['startTime'],                    endTime=form.cleaned_data['endTime'],                    #teamMeta=models.TeamMeta.objects.create()                )                return HttpResponseRedirect('/system/course'+'?message=success')        else:            form = CourseForm()            error_message = ''            return HttpResponseRedirect('/system/createCourse'+'?message='+error_message)    else:        terms = models.Term.objects.all()        if(terms):            form = CourseForm()            return render(request, 'system/admin_create_course.html', {'form': form,'terms':terms})        else:            return HttpResponseRedirect('/system/createTerm')@login_required(login_url='app:login')def edit_term(request):    if request.method == 'POST':        terms = models.Term.objects.get(id=request.POST['termId'])        form = EditTermForm(request.POST,instance=terms)        if form.is_valid():            form.save()            return HttpResponseRedirect('/system/editTerm?id='+request.POST['termId']+'&&message=success')        else:            terms = models.Term.objects.get(id=request.POST['termId'])            form = EditTermForm(instance=terms)            return render(request,'system/admin_edit_term.html',{'form':form})    else:        terms = models.Term.objects.get(id=request.GET['id'])        #request.session['term']=terms        form = EditTermForm(instance=terms)        return render(request, 'system/admin_edit_term.html', {'form': form,'termId':request.GET['id']})@login_required(login_url='app:login')def edit_course(request):    if request.method == 'POST':        course = models.Course.objects.get(id=request.POST['courseId'])        form = EditCourseForm(request.POST,instance=course)        if form.is_valid():            form.save()            return HttpResponseRedirect('/system/editCourse?id='+request.POST['courseId']+'&&message=success')        else:            course = models.Course.objects.get(id=request.POST['courseId'])            term = course.term            form = EditCourseForm(instance=course)            return render(request,'system/admin_edit_course.html',{'form':form,'courseId':request.POST['courseId'],'termInfo':term})    else:        course = models.Course.objects.get(id=request.GET['id'])        term = course.term        form = EditCourseForm(instance=course)        return render(request, 'system/admin_edit_course.html', {'form': form,'courseId':request.GET['id'],'termInfo':term})@login_required(login_url='app:login')def show_term(request):    terms = models.Term.objects.all()    return render(request,'system/admin_term_info.html', {'terms':terms})@login_required(login_url='app:login')def show_course(request):    courses = models.Course.objects.all()    info = list()    for course in courses:        enrolls = models.Enroll.objects.filter(course=course)        flag = False        for enroll in enrolls:            if enroll.user.role == 'student':                flag = True        course_dic = {'course':course, 'flag':flag}        info.append(course_dic)    return render(request,'system/admin_course_info.html', {'info':info})@login_required(login_url='app:login')def load_student(request):    courses = models.Course.objects.all()    info = list()    for course in courses:        enrolls = models.Enroll.objects.filter(course=course)        flag = False        for enroll in enrolls:            if enroll.user.role == 'student':                flag = True        course_dic = {'course': course, 'flag': flag}        info.append(course_dic)    form = FileForm()    return render(request, 'system/load_student.html', {'info': info, 'form': form})@login_required(login_url='app:login')def load_teacher(request):    courses = models.Course.objects.all()    info = list()    for course in courses:        enrolls = models.Enroll.objects.filter(course=course)        flag = False        for enroll in enrolls:            if enroll.user.role == 'teacher':                flag = True        course_dic = {'course': course, 'flag': flag}        info.append(course_dic)    form = FileForm()    return render(request, 'system/load_teacher.html', {'info': info, 'form': form})