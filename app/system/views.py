from django.contrib.auth.decorators import login_requiredfrom django.shortcuts import render,redirectfrom django.http import HttpResponsefrom app.system.forms  import FileForm,TermForm,CourseForm,EditTermForm,EditCourseFormfrom app.system.utils import handle_uploaded_userfrom django.core.exceptions import ObjectDoesNotExistfrom  app import modelsimport datetime# Create your views here.#@login_required(login_url='app:login')def index(request):    return render(request,'system/systemIndex.html')#@login_required(login_url='app:login')def upload_students(request):    if request.method == 'POST':        form = FileForm(request.POST, request.FILES)        if form.is_valid():            if request.FILES['filefield'].name.split('.')[-1] == 'xlsx':                try:                    handle_uploaded_user(request,f=request.FILES['filefield'],user_role='student')                except ObjectDoesNotExist as e:                    error_message =""                    return HttpResponse('error')                return HttpResponse('success')            else:                error_message = '文件格式错误，请上传Excel文件（.xlsl)'                form = FileForm()                return HttpResponse("文件格式错误，请上传Excel文件")        else:            error_message = '请添加文件'            form = FileForm()            return render(request,'system/uploadStudents.html')    return render(request,'system/uploadStudents.html')#@login_required(login_url='app:login')def upload_teachers(request):    if request.method == 'POST':        form = FileForm(request.POST, request.FILES)        if form.is_valid():            if request.FILES['filefield'].name.split('.')[-1] == 'xlsx':                try:                    handle_uploaded_user(request,f=request.FILES['filefield'],user_role='teacher')                except ObjectDoesNotExist as e:                    error_message =""                    return HttpResponse('error')                return HttpResponse('success')            else:                error_message = '文件格式错误，请上传Excel文件（.xlsl)'                form = FileForm()                return HttpResponse("文件格式错误，请上传Excel文件")        else:            error_message = '请添加文件'            form = FileForm()            return render(request,'system/uploadTeachers.html')    return render(request,'system/uploadTeachers.html')#@login_required(login_url='app:login')def create_term(request):    if request.method == "POST":        form = TermForm(request.POST)        if form.is_valid():            year = form.cleaned_data['year']            semester = form.cleaned_data['semester']            term_exists = models.Term.objects.filter(year=year, semester=semester)            if (term_exists):                error_message = '学期已存在'                return  HttpResponse('exists')            else:                models.Term.objects.create(year=year,semester=semester,startWeek=form.cleaned_data['startWeek'],endWeek=form.cleaned_data['endWeek'])                return HttpResponse('success')    else:        form = TermForm()        return render(request,'system/createTerm.html',{'form':form})#@login_required(login_url='app:login')def create_course(request):    if request.method == "POST":        form = CourseForm(request.POST)        if form.is_valid():            name = form.cleaned_data['name']            term_id = request.POST['term']            course_exists = models.Course.objects.filter(name=name,team=term_id)            if (course_exists):                error_message = '课程存在'                return HttpResponse('exits')            else:                models.Course.objects.create(                    name=name,                    term= models.Term.objects.get(id=term_id),                    classroom=form.cleaned_data['classroom'],                    credit=form.cleaned_data['credit'],                    status='unstarted',                    startTime=form.cleaned_data['startTime'],                    endTime=form.cleaned_data['endTime'],                    #teamMeta=models.TeamMeta.objects.create()                )                return HttpResponse('success')    else:        terms = models.Term.objects.all()        if(terms):            form = CourseForm()            return render(request, 'system/createCourse.html', {'form': form,'terms':terms})        else:            return redirect('/system/createTerm')#@login_required(login_url='app:login')def edit_term(request):    if request.method == 'POST':        terms = models.Term.objects.get(id=1)        form = EditTermForm(request.POST,instance=terms)        if form.is_valid():            form.save()            return HttpResponse('success')        else:            terms = models.Term.objects.get(id=1)            form = EditTermForm(instance=terms)            return render(request,'system/editTerm.html',{'form':form})    else:        terms = models.Term.objects.get(id=1)        #request.session['term']=terms        form = EditTermForm(instance=terms)        return render(request, 'system/editTerm.html', {'form': form})#@login_required(login_url='app:login')def edit_course(request):    if request.method == 'POST':        course = models.Course.objects.get(id=1)        form = EditCourseForm(request.POST,instance=course)        form = EditCourseForm(request.POST)        if form.is_valid():            form.save()            return HttpResponse('success')        else:            course = models.Course.objects.get(id=1)            form = EditCourseForm(instance=course)            return render(request,'system/editCourse.html',{'form':form})    else:        course = models.Course.objects.get(id=1)        form = EditCourseForm(instance=course)        return render(request, 'system/editCourse.html', {'form': form})#@login_required(login_url='app:login')def show_term(request):    terms = models.Term.objects.all()    return render(request,'system/showTerm.html', {'terms':terms})#@login_required(login_url='app:login')def show_course(request):    courses = models.Course.objects.all()    return render(request,'system/showCourse.html', {'courses':courses})