from django.shortcuts import renderfrom django.http import HttpResponsefrom app.system.forms  import FileForm,TermForm,CourseFormfrom app.system.utils import handle_uploaded_userfrom django.core.exceptions import ObjectDoesNotExistfrom  app import modelsimport datetime# Create your views here.def index(request):    return render(request,'system/systemIndex.html')def upload_students(request):    if request.method == 'POST':        form = FileForm(request.POST, request.FILES)        if form.is_valid():            if request.FILES['filefield'].name.split('.')[-1] == 'xlsx':                try:                    handle_uploaded_user(request,f=request.FILES['filefield'],user_role='student')                except ObjectDoesNotExist as e:                    error_message =""                    return HttpResponse('error')                return HttpResponse('success')            else:                error_message = '文件格式错误，请上传Excel文件（.xlsl)'                form = FileForm()                return HttpResponse("文件格式错误，请上传Excel文件")        else:            error_message = '请添加文件'            form = FileForm()            return render(request,'system/uploadStudents.html')    return render(request,'system/uploadStudents.html')def upload_teachers(request):    if request.method == 'POST':        form = FileForm(request.POST, request.FILES)        if form.is_valid():            if request.FILES['filefield'].name.split('.')[-1] == 'xlsx':                try:                    handle_uploaded_user(request,f=request.FILES['filefield'],user_role='teacher')                except ObjectDoesNotExist as e:                    error_message =""                    return HttpResponse('error')                return HttpResponse('success')            else:                error_message = '文件格式错误，请上传Excel文件（.xlsl)'                form = FileForm()                return HttpResponse("文件格式错误，请上传Excel文件")        else:            error_message = '请添加文件'            form = FileForm()            return render(request,'system/uploadTeachers.html')    return render(request,'system/uploadTeachers.html')def create_term(request):    if request.method == "POST":        form = TermForm(request.POST)        if form.is_valid():            year = form.cleaned_data['year']            semester = form.cleaned_data['semester']            term_exists = models.Term.objects.filter(year=year, semester=semester)            if (term_exists):                error_message = '课程已存在'                return  HttpResponse('exists')            else:                models.Term.objects.create(year=year,semester=semester,startWeek=form.cleaned_data['startWeek'],endWeek=form.cleaned_data['endWeek'])                return HttpResponse('success')    else:        form = TermForm()        return render(request,'system/createTerm.html',{'form':form})def create_course(request):    if request.method == "POST":        form = CourseForm(request.POST)        if form.is_valid():            name = form.cleaned_data['name']            term = form.cleaned_data['term']            course_exists = models.Course.objects.filter(name=name,team=term)            if (course_exists):                error_message = '课程存在'                return HttpResponse('exits')            else:                models.Course.objects.create(                    name=name,                    term= models.Term.objects.get(id=term),                    classroom=form.cleaned_data['classroom'],                    credit=form.cleaned_data['credit'],                    status='unstarted',                    startTime=form.cleaned_data['startTime'],                    endTime=form.cleaned_data['endTime'],                    teamMeta=models.TeamMeta.objects.create(startTime = datetime.datetime.now(),endTime = datetime.datetime.now())                )                return HttpResponse('success')    else:        form = CourseForm()        return render(request,'system/createCourse.html',{'form':form})